device_id <- data$device[1]
start_time <- as.character(data$time[1])
start_date <- as.character(data$date[1])
end_time <- as.character(data$time[nrow(data)])
end_date <- as.character(data$date[nrow(data)])
# Route plot
map <- get_googlemap(center = c(lon = median(data$longitude), lat = median(data$latitude)), zoom = zoom, maptype = "satellite") #adjust zoom according to how points are spread
Route <- ggmap(map) +
geom_segment(data = data, aes(x = longitude, y = latitude, col = prediction, xend = lead(longitude), yend = lead(latitude)),
arrow = arrow(length = unit(0.2, "cm")), color = "black") + theme_void() +
geom_point(data = data, aes(x = longitude, y = latitude, col = prediction), size = points) +
scale_color_manual(name = "Behaviour", values = myColors) +
theme(text = element_text(size = 10), plot.subtitle = element_text(size=7),
legend.title = element_text(size=10), legend.text = element_text(size=10),legend.key.height = unit(0.8, "lines"),
legend.key.width = unit(0.5, "lines"), plot.margin = margin(30, 10, 30, 30)) +
labs(title = "Route", x = "Longitude", y = "Latitude",
subtitle = paste("Device ", device_id,", from ", start_date, " ",start_time, " until ", end_date, " ", end_time,'\n', sep="")) +
guides(col = guide_legend(override.aes = list(size = 2)))
# Group and arrange smaller plots
Altitude <- ggplot(data, aes(x = counttime, y = altitude, col = prediction)) +
geom_point(size = points, show.legend = F) +
scale_color_manual(name = "Behaviour", values = myColors) +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Altitude over time") +
theme_classic(base_size = 10) +
theme(plot.margin = margin(30, 15, 15, 5)) +
labs(x = "Time", y = "Altitude (m)")
Temperature <- ggplot(data, aes(x = counttime, y = temperature, col = prediction)) +
geom_point(size = points, show.legend = F) +
scale_color_manual(name = "Behaviour", values = myColors) +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Temperature over time") +
theme_classic(base_size = 10)  +
theme(plot.margin = margin(30, 30, 15, 15)) +
labs(x = "Time", y = "Temperature (°C)")
Speed <- ggplot(data, aes(x = counttime, y = speed, col = prediction)) +
geom_point(size = points, show.legend = F) +
scale_color_manual(name = "Behaviour", values = myColors) +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Speed over time") +
theme_classic(base_size = 10)  +
theme(plot.margin = margin(15, 15, 30, 5)) +
labs(x = "Time", y = "Speed (km/h)")
TempChange <- ggplot(data, aes(x = counttime, y = tempchange, col = prediction)) +
geom_point(size = points, show.legend = F) +
scale_color_manual(name = "Behaviour", values = myColors) +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Change in temperature over time") +
theme_classic(base_size = 10) +
theme(plot.title = element_text(size=10),plot.margin = margin(15, 30, 30, 15)) +
labs(x = "Time", y = "Temperature change per time interval (°C)")
small_plots <- list(Altitude, Temperature, Speed, TempChange)
figure <- arrangeGrob(grobs = small_plots, ncol = 2, nrow=2, padding = unit(10, "pt"))
GG <- arrangeGrob(Route, figure, ncol = 2, padding = unit(10, "pt"))
grid.newpage()
grid.draw(GG)
}
plot_map(test_dataset,18,1) #Adjust zoom and point size for better readability
plot_map(test_dataset,13,1) #Adjust zoom and point size for better readability
plot_map(test_dataset,10,1) #Adjust zoom and point size for better readability
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
library(sf)
sf::sf_use_s2(FALSE)
library(dplyr)   # For data manipulation
library(readr)   #for reading the csv files
library(ggplot2)    # For ggplot()
library(lwgeom) #measuring the hull area
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
#convex hull events
events_inside_park_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2023.csv")
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2023,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='black', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
#total area inside the parks
hull_inside_windpark <- st_intersection(hull,wind_parks)
area_m2 <- sum(st_area(hull_inside_windpark))
area_km2 <- as.numeric(area_m2) / 1e6
#convex hull events
events_inside_park_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2024.csv")
all_tracker_data_with_inPark_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2024.csv")
unique_park_events_2024 <- all_tracker_data_with_inPark_2024 %>%
filter(inPark == 1) %>%
distinct(file_name, .keep_all=TRUE)
write_csv(unique_park_events_2024, "events_inside_park_2024.csv")
#convex hull events
events_inside_park_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2024.csv")
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2024,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='black', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2024") +
theme_minimal()
#total area inside the parks
hull_inside_windpark <- st_intersection(hull,wind_parks)
area_m2 <- sum(st_area(hull_inside_windpark))
area_km2 <- as.numeric(area_m2) / 1e6
#2023
all_tracker_data_with_inPark_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2023.csv")
points_inside_wind_parks_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/points_inside_wind_parks_2023.csv")
ExFlap_Manouvre_events_2023 <- all_tracker_data_with_inPark_2023 %>%
filter(prediction == "ExFlap" | prediction =="Manouvre") %>%
distinct(file_name, .keep_all=TRUE)
table(ExFlap_Manouvre_events_2023$inPark, ExFlap_Manouvre_events_2023$prediction)
#2024
all_tracker_data_with_inPark_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2024.csv")
points_inside_wind_parks_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/points_inside_wind_parks_2024.csv")
ExFlap_Manouvre_events_2024 <- all_tracker_data_with_inPark_2024 %>%
filter(prediction == "ExFlap" | prediction =="Manouvre") %>%
distinct(file_name, .keep_all=TRUE)
table(ExFlap_Manouvre_events_2024$inPark, ExFlap_Manouvre_events_2024$prediction)
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
gc()
# Google Maps API key (replace with your actual key if needed)
api_key = "AIzaSyBfsj_cdFpvqUPxqpH6dBvSMzKaAeXj9B8"
register_google(key = api_key)
# Load libraries
library(dplyr)
# Load libraries
library(dplyr)
library(ggplot2)
library(ggmap)
library(grid)
# Google Maps API key (replace with your actual key if needed)
api_key = "AIzaSyBfsj_cdFpvqUPxqpH6dBvSMzKaAeXj9B8"
register_google(key = api_key)
# Load the full dataset
Bird_df_2024 <- read_csv("/Users/Constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2024.csv")
library(readr)
# Load the full dataset
Bird_df_2024 <- read_csv("/Users/Constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2024.csv")
# Define the plotting function
plot_map <- function(data, zoom = 13, points = 2, return.plot=TRUE){
data$altitude <- pmax(0, pmin(50, data$altitude))
data <- data %>% mutate(prediction = ifelse(confidence < 0.60, "Unknown", prediction))
data <- data %>% mutate(prediction = ifelse(altitude > 15 & prediction == "SitStand",
"Unknown", prediction))
myColors <- c("Float" = "#80B1D3", "Flap" = "#8DD3C7", "Soar" = "#BEBADA", "Boat" = "#FFFFB3",
"Pecking" = "#FB8072", "ExFlap" = "purple", "Manouvre" = "#FDB462",
"SitStand" = "#B3DE69", "TerLoco" = "#FCCDE5", "Unknown"="#D3D3D3")
shape_scale <- scale_shape_manual(
name = "In Park",
values = c("0" = 1, "1" = 17),
labels = c("No", "Yes")
)
data$counttime <- as.numeric(as.POSIXct(data$date_time)) # unit is seconds
data$date <- as.Date(data$date_time)
data$time <- format(as.POSIXct(data$date_time), format = "%H:%M:%S")
data$distance <- c(0, sqrt((diff(data$latitude)^2 + diff(data$longitude)^2))) # in meter
data$speed <- c(0, (data$distance[-1] / diff(data$counttime)) * 3.6) # km/h
data$tempchange <- c(0, diff(data$temperature) / diff(data$counttime))
data <- data %>% mutate(time_diff = c(0, diff(counttime)))
data <- data %>% mutate(tot_time = cumsum(time_diff))
quartz <- c(1,max(which(data$tot_time < max(data$tot_time)*1/4)),
max(which(data$tot_time < max(data$tot_time)/2)),
max(which(data$tot_time < max(data$tot_time)*3/4)),
nrow(data))
custom_breaks <- data$counttime[quartz]
custom_labels <- data$time[quartz]
device_id <- data$device_info_serial[1]
start_time <- as.character(data$time[1])
start_date <- as.character(data$date[1])
end_time <- as.character(data$time[nrow(data)])
end_date <- as.character(data$date[nrow(data)])
# Route plot
map <- get_googlemap(center = c(lon = median(data$longitude), lat = median(data$latitude)),
zoom = zoom, maptype = "satellite")
Route <- ggmap(map) +
geom_segment(data = data, aes(x = longitude, y = latitude, col = prediction,
xend = lead(longitude), yend = lead(latitude)),
arrow = arrow(length = unit(0.2, "cm")), color = "black") +
theme_void() +
geom_point(data = data, aes(x = longitude, y = latitude, col = prediction,
shape = as.factor(inPark)), size = points) +
scale_color_manual(name = "Behaviour", values = myColors) +
shape_scale +
theme(text = element_text(size = 10), plot.subtitle = element_text(size=7),
legend.title = element_text(size=10), legend.text = element_text(size=10),
legend.key.height = unit(0.8, "lines"),
legend.key.width = unit(0.5, "lines"), plot.margin = margin(30, 10, 30, 30)) +
labs(title = "Route", x = "Longitude", y = "Latitude",
subtitle = paste("Device ", device_id,", from ", start_date, " ",start_time,
" until ", end_date, " ", end_time,'\n', sep="")) +
guides(col = guide_legend(override.aes = list(shape = 16, size = 2)),
shape = guide_legend())
# Additional plots
Altitude <- ggplot(data, aes(x = counttime, y = altitude, shape = as.factor(inPark))) +
geom_point(aes(col = prediction), size = points, show.legend = FALSE) +
geom_line(color = "Gray", show.legend = FALSE) +
scale_color_manual(name = "Behaviour", values = myColors) +
shape_scale +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Altitude over time") +
theme_classic(base_size = 10) +
theme(plot.margin = margin(15, 15, 30, 5)) +
labs(x = "Time", y = "Altitude (m)")
Temperature <- ggplot(data, aes(x = counttime, y = temperature, shape = as.factor(inPark))) +
geom_point(aes(col = prediction), size = points, show.legend = FALSE) +
geom_line(color = "Gray", show.legend = FALSE) +
scale_color_manual(name = "Behaviour", values = myColors) +
shape_scale +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Temperature over time") +
theme_classic(base_size = 10) +
theme(plot.margin = margin(15, 15, 30, 5)) +
labs(x = "Time", y = "Temperature (°C)")
Speed <- ggplot(data, aes(x = counttime, y = speed, shape = as.factor(inPark))) +
geom_point(aes(col = prediction), size = points, show.legend = FALSE) +
geom_line(color = "Gray", show.legend = FALSE) +
scale_color_manual(name = "Behaviour", values = myColors) +
shape_scale +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Speed over time") +
theme_classic(base_size = 10) +
theme(plot.margin = margin(15, 15, 30, 5)) +
labs(x = "Time", y = "Speed (km/h)")
TempChange <- ggplot(data, aes(x = counttime, y = tempchange, shape = as.factor(inPark))) +
geom_point(aes(col = prediction), size = points, show.legend = FALSE) +
geom_line(color = "Gray", show.legend = FALSE) +
scale_color_manual(name = "Behaviour", values = myColors) +
shape_scale +
scale_x_continuous(breaks = custom_breaks, labels = custom_labels) +
ggtitle("Change in temperature over time") +
theme_classic(base_size = 10) +
theme(plot.margin = margin(15, 15, 30, 5)) +
labs(x = "Time", y = "Temperature change per time interval (°C)")
small_plots <- list(Altitude, Temperature, Speed, TempChange)
figure <- arrangeGrob(grobs = small_plots, ncol = 2, nrow = 2, padding = unit(10, "pt"))
GG <- arrangeGrob(Route, figure, ncol = 2, padding = unit(10, "pt"))
grid.newpage()
grid.draw(GG)
if (return.plot) return(GG)
}
#2023
all_tracker_data_with_inPark_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2023.csv")
points_inside_wind_parks_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/points_inside_wind_parks_2023.csv")
ExFlap_Manouvre_events_2023 <- all_tracker_data_with_inPark_2023 %>%
filter(prediction == "ExFlap" | prediction =="Manouvre") %>%
distinct(file_name, .keep_all=TRUE)
table(ExFlap_Manouvre_events_2023$inPark, ExFlap_Manouvre_events_2023$prediction)
#2024
all_tracker_data_with_inPark_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2024.csv")
points_inside_wind_parks_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/points_inside_wind_parks_2024.csv")
ExFlap_Manouvre_events_2024 <- all_tracker_data_with_inPark_2024 %>%
filter(prediction == "ExFlap" | prediction =="Manouvre") %>%
distinct(file_name, .keep_all=TRUE)
table(ExFlap_Manouvre_events_2024$inPark, ExFlap_Manouvre_events_2024$prediction)
library(sf)
library(sf)
sf::sf_use_s2(FALSE)
library(dplyr)   # For data manipulation
library(readr)   #for reading the csv files
library(ggplot2)    # For ggplot()
library(lwgeom) #measuring the hull area
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
#convex hull events
events_inside_park_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2023.csv")
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2023,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='black', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
#total area inside the parks
hull_inside_windpark <- st_intersection(hull,wind_parks)
area_m2 <- sum(st_area(hull_inside_windpark))
area_km2 <- as.numeric(area_m2) / 1e6
library(sf)
sf::sf_use_s2(FALSE)
library(dplyr)   # For data manipulation
library(readr)   #for reading the csv files
library(ggplot2)    # For ggplot()
library(lwgeom) #measuring the hull area
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
#convex hull events
events_inside_park_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2024.csv")
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2024,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='black', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
#total area inside the parks
hull_inside_windpark <- st_intersection(hull,wind_parks)
area_m2 <- sum(st_area(hull_inside_windpark))
area_km2 <- as.numeric(area_m2) / 1e6
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='red', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
library(sf)
sf::sf_use_s2(FALSE)
library(dplyr)   # For data manipulation
library(readr)   #for reading the csv files
library(ggplot2)    # For ggplot()
library(lwgeom) #measuring the hull area
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
#convex hull events
events_inside_park_2023 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2024.csv")
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2024,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='red', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
#total area inside the parks
hull_inside_windpark <- st_intersection(hull,wind_parks)
area_m2_2024 <- sum(st_area(hull_inside_windpark))
area_km2_2024 <- as.numeric(area_m2_2024) / 1e6
wind_parks <- st_transform(wind_parks, crs = 3857)
hull <- st_transform(hull, crs = 3857)
hull_inside_windpark <- st_intersection(hull,wind_parks)
area_m2_2024 <- sum(st_area(hull_inside_windpark))
area_km2_2024 <- as.numeric(area_m2_2024) / 1e6
#convex hull events
events_inside_park_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2024.csv")
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2024,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='red', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
wind_parks <- st_transform(wind_parks, crs = 3857)
hull <- st_transform(hull, crs = 3857)
hull_inside_windpark <- st_intersection(hull,wind_parks)
area_m2_2024 <- sum(st_area(hull_inside_windpark))
area_km2_2024 <- as.numeric(area_m2_2024) / 1e6
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2024,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='red', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
hull_inside_windpark <- st_intersection(hull,wind_parks)
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
library(sf)
sf::sf_use_s2(FALSE)
library(dplyr)   # For data manipulation
library(readr)   #for reading the csv files
library(ggplot2)    # For ggplot()
library(lwgeom) #measuring the hull area
# 1. Load wind park polygons (shapefile)
wind_parks <- st_read("/Users/constantijn/Desktop/2025_Birds/Data/Data_RAW/Wind Farms (polygons)/windfarmspolyPolygon.shp")
wind_parks <- st_transform(park_polygon, crs = 4326)
wind_parks <- st_transform(wind_parks, crs = 4326)
#convex hull events
events_inside_park_2024 <- read_csv("/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/events_inside_park_2024.csv")
# Convert tracker data to an `sf` object (ensure longitude/latitude columns are correct)
points_sf <- st_as_sf(
events_inside_park_2024,
coords = c("longitude", "latitude"),  # Replace with your column names
crs = 4326  # Set coordinate system to WGS84 (standard for lat/lon)
)
hull <- st_convex_hull(st_union(points_sf))
hull_bbox <- st_bbox(hull)
# View results: rows with non-NA values indicate overlaps
ggplot() +
geom_sf(data = wind_parks, aes(color = "Wind Parks"), fill = "lightblue", alpha = 0.5) +
geom_sf(data = points_sf, aes(color = "Points Inside The Wind Park"), color ='red', size = 1, alpha = 0.3) +
geom_sf(data = hull,fill =NA, aes(color = "Convex Hull Inside Wind Park"), size = 1.2) +
coord_sf(
xlim = c(hull_bbox$xmin, hull_bbox$xmax),
ylim = c(hull_bbox$ymin, hull_bbox$ymax),
expand = FALSE
) +
labs(title = "Convex hull over Wind Park 2023") +
theme_minimal()
library(readr)
library(ggmap)
library(gridExtra)
library(grid)
library(ggplot2)
library(patchwork)
#Save google maps API key to obtain map background
api_key = "AIzaSyBfsj_cdFpvqUPxqpH6dBvSMzKaAeXj9B8"
all_tracker_data_with_inPark_2023 <- read_csv("/Users/Constantijn/Desktop/2025_Birds/Data/Data_Cleaned/all_tracker_data_with_inPark_2023.csv")
points_inside_wind_parks_2023 <- read_csv("/Users/Constantijn/Desktop/2025_Birds/Data/Data_Cleaned/points_inside_wind_parks_2023.csv")
Bird_df_2023 <- read_csv("/Users/Constantijn/Desktop/2025_Birds/Data/Data_Cleaned/processed_data_2023.csv")
# 2. Define the folder with your CSV files
csv_folder <- "/Users/constantijn/Desktop/2025_Birds/Data/Data_Cleaned/processed_data_2023"
# 3. List all CSV files in the folder
Bird_df_2023 <- list.files(path = csv_folder, pattern = "\\.csv$", full.names = TRUE)
output_folder <- "/Users/constantijn/Desktop/2025_Birds/Plots_2023"
dir.create(output_folder, showWarnings = FALSE)
tracker_data_inside_Park_2023 <- all_tracker_data_with_inPark_2023 %>%
filter(inPark= 1) %>%
distinct(file_name, .keep_all = TRUE)
tracker_data_inside_Park_2023 <- all_tracker_data_with_inPark_2023 %>%
filter(inPark==1) %>%
distinct(file_name, .keep_all = TRUE)
tracker_data_outside_Park_2023 <- all_tracker_data_with_inPark_2023 %>%
filter(inPark==0) %>%
distinct(file_name, .keep_all = TRUE)
tracker_data_inside_Park_2023 <- all_tracker_data_with_inPark_2023 %>%
filter(inPark==1)
tracker_data_outside_Park_2023 <- all_tracker_data_with_inPark_2023 %>%
filter(inPark==0)
